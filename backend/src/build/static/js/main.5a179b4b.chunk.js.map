{"version":3,"sources":["components/NavBar.jsx","pages/posts.js","components/PostList.jsx","pages/HomePage.jsx","pages/AboutPage.jsx","pages/NewPost.jsx","components/UpvoteSection.jsx","components/CommentSection.jsx","pages/NotFoundPage.jsx","pages/PostPage.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","to","posts","postId","postTitle","postContent","PostList","map","post","key","substring","HomePage","AboutPage","initialState","reducer","state","action","type","payload","NewPost","useReducer","dispatch","name","placeholder","value","onChange","event","target","UpvoteSection","upvotes","setPostInfo","upvotePost","a","fetch","method","result","json","body","onClick","CommentSection","useState","username","setUsername","text","setText","addComment","JSON","stringify","headers","rows","cols","NotFoundPage","PostPage","match","params","comments","postInfo","useEffect","console","log","fetchData","find","paragraph","comment","App","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a179b4b.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst NavBar = () => (\n  <div className=\"nav-flex-container\">\n    <div className=\"nav-item-logo\">\n      <Link to=\"/\">raddit</Link>\n    </div>\n    <div className=\"nav-item\">\n      <Link to=\"/newpost\">New Post</Link>\n    </div>\n    <div className=\"nav-item\">\n      <Link to=\"/about\">About</Link>\n    </div>\n  </div>\n);\n\nexport default NavBar;\n","// import uuidv4 from 'uuid/v4';\n\nconst posts = [\n  {\n    // postId: uuidv4(),\n    postId: '1',\n    postTitle: 'The way they make shows',\n    postContent: [\n      `Well, the way they make shows is, they make one show. That show's called a pilot.`,\n      `Then they show that show to the people who make shows, and on the strength of that one show they decide if they're going to make more shows.`,\n      `Some pilots get picked and become television programs. Some don't, become nothing.`,\n      `She starred in one of the ones that became nothing.`,\n    ],\n  },\n  {\n    postId: '2',\n    postTitle: 'They called me Mr Glass',\n    postContent: [\n      `Now that we know who you are, I know who I am. I'm not a mistake! It all makes sense!`,\n      `In a comic, you know how you can tell who the arch-villain's going to be? He's the exact opposite of the hero. And most times they're friends, like you and me!`,\n      `I should've known way back when... You know why, David? Because of the kids.`,\n      `They called me Mr Glass.`,\n    ],\n  },\n  {\n    postId: '3',\n    postTitle: 'This gun is advertised as the most popular gun in American crime',\n    postContent: [\n      `Now that there is the Tec-9, a crappy spray gun from South Miami. This gun is advertised as the most popular gun in American crime.`,\n      `Do you believe that shit? It actually says that in the little book that comes with it: the most popular gun in American crime.`,\n      `Like they're actually proud of that shit.`,\n    ],\n  },\n];\n\nexport default posts;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport posts from '../pages/posts';\n\nconst PostList = () => {\n  return (\n    <>\n      {posts.map((post, key) => (\n        <div className=\"post-list-item\" key={key}>\n          <Link to={`/posts/${post.postId}`}>\n            <h5>{post.postTitle.substring(0, 24)}...</h5>\n          </Link>\n        </div>\n      ))}\n    </>\n  );\n};\n\nexport default PostList;\n","import React from 'react';\nimport PostList from '../components/PostList';\n\nconst HomePage = () => (\n  <div className=\"page-body\">\n    <PostList />\n  </div>\n);\n\nexport default HomePage;\n","import React from 'react';\n\nconst AboutPage = () => (\n  <div>\n    <h2>About</h2>\n    <p>Like Reddit but rad</p>\n  </div>\n);\n\nexport default AboutPage;\n","import React, { useReducer } from 'react';\n\nconst initialState = {\n  postTitle: '',\n  postContent: '',\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'postTitle':\n      return { postTitle: action.payload };\n    case 'postContent':\n      return { postContent: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst NewPost = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <div className=\"form\">\n      <h2>New Post</h2>\n      <form>\n        <input\n          name=\"postTitle\"\n          placeholder=\"Title\"\n          value={state.postTitle}\n          onChange={event => dispatch({ type: 'postTitle', payload: event.target.value })}\n        />\n        <br />\n        <textArea\n          type=\"text\"\n          name=\"postContent\"\n          placeholder=\"Text (optional)\"\n          value={state.postContent}\n          onChange={event => dispatch({ type: 'postContent', payload: event.target.value })}\n        />\n      </form>\n      <button>Submit</button>\n    </div>\n  );\n};\n\nexport default NewPost;\n","import React from 'react';\n\nconst UpvoteSection = ({ postId, upvotes, setPostInfo }) => {\n  const upvotePost = async () => {\n    const result = await fetch(`/api/posts/${postId}/upvote`, { method: 'post' });\n    const body = await result.json();\n    setPostInfo(body);\n  };\n\n  return (\n    <div>\n      <button onClick={() => upvotePost()}>Add upvote</button>\n      <p>Upvotes: {upvotes}</p>\n    </div>\n  );\n};\n\nexport default UpvoteSection;\n","import React, { useState } from 'react';\n\nconst CommentSection = ({ postId, setPostInfo }) => {\n  const [username, setUsername] = useState('');\n  const [text, setText] = useState('');\n  const addComment = async () => {\n    const result = await fetch(`/api/posts/${postId}/add-comment`, {\n      method: 'post',\n      body: JSON.stringify({ username, text: text }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    const body = await result.json();\n    setPostInfo(body);\n    setUsername('');\n    setText('');\n  };\n\n  return (\n    <div>\n      <h3>Add a comment</h3>\n      <label>\n        Name:\n        <input type=\"text\" value={username} onChange={event => setUsername(event.target.value)} />\n      </label>\n      <br />\n      <label>\n        Comment:\n        <textarea rows=\"4\" cols=\"50\" value={text} onChange={event => setText(event.target.value)} />\n      </label>\n      <br />\n      <button onClick={() => addComment()}>Add comment</button>\n    </div>\n  );\n};\n\nexport default CommentSection;\n","import React from \"react\";\n\nconst NotFoundPage = () => <h1>404: Page Not Found</h1>;\n\nexport default NotFoundPage;\n","import React, { useState, useEffect } from 'react';\nimport posts from './posts';\nimport UpvoteSection from '../components/UpvoteSection';\nimport CommentSection from '../components/CommentSection';\nimport NotFoundPage from './NotFoundPage';\n\nconst PostPage = ({ match }) => {\n  const postId = match.params.postId;\n  const [postInfo, setPostInfo] = useState({ upvotes: 0, comments: [] });\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await fetch(`/api/posts/${postId}`);\n      const body = await result.json();\n      console.log(body);\n      setPostInfo(body);\n    };\n    fetchData();\n    setPostInfo({ upvotes: 3 });\n  }, [postId]);\n  const post = posts.find(post => post.postId === postId);\n  if (!post) return <NotFoundPage />;\n  return (\n    <div className=\"post-content\">\n      <h2>{post.postTitle}</h2>\n      <UpvoteSection postId={postId} upvotes={postInfo.upvotes} setPostInfo={setPostInfo} />\n      <CommentSection postId={postId} setPostInfo={setPostInfo} />\n      {post.postContent.map((paragraph, key) => (\n        <p key={key}>{paragraph}</p>\n      ))}\n      <div>\n        {postInfo.comments &&\n          postInfo.comments.map((comment, key) => <p>{`${comment.username}: ${comment.text}`}</p>)}\n      </div>\n    </div>\n  );\n};\n\nexport default PostPage;\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport NavBar from './components/NavBar';\nimport HomePage from './pages/HomePage';\nimport AboutPage from './pages/AboutPage';\nimport NewPost from './pages/NewPost';\nimport PostPage from './pages/PostPage';\nimport NotFoundPage from './pages/NotFoundPage';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <NavBar />\n        <Switch>\n          <Route path=\"/\" component={HomePage} exact />\n          <Route path=\"/about\" component={AboutPage} />\n          <Route path=\"/newpost\" component={NewPost} />\n          <Route path=\"/posts/:postId\" component={PostPage} />\n          <Route component={NotFoundPage} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}